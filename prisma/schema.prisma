// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  email String @unique
  hashedPassword String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  songs Song[]
  playlists Playlist[]
  albums Album[]
}

model Song {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  albumId String @db.ObjectId
  userId String @db.ObjectId
  playlistId String @db.ObjectId
  title String
  imageUrl String
  description String
  audioUrl String?
  duration String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  album Album @relation(fields: [albumId], references: [id], onDelete: Cascade)
  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
} 

model Album {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  title String
  description String
  imageUrl String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  songs Song[]
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Playlist {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  title String
  description String
  imageUrl String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  songs Song[]
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
